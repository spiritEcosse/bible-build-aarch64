language: cpp

env:
  global:
    # Global build options and C++ flags
    - CXX_FLAGS="-Wall -Wpedantic -Werror -Wno-variadic-macros -Wno-long-long -Wno-shadow"
    - CMAKE_VERSION=3.19.3
    - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
    - CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz"

matrix:
 include:
  - os: linux
    dist: xenial
    sudo: required
    compiler: g++
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - sourceline: 'ppa:beineri/opt-qt563-xenial'
        update: true
        packages:
          - qt56base
          - qt56tools
          - gcc-9
          - g++-9
          - libc6-i386
          - libgl-dev
          - libgl1-mesa-dev
          - mesa-common-dev
          - valgrind
          # Misc
          - python-yaml
          - git

install:
  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90
  - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 90
  - sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-9 90
  # Install lcov from tag v1.15
  - sudo git clone https://github.com/linux-test-project/lcov.git && cd lcov && sudo git checkout tags/v1.15 && sudo make install && cd ..
  - sudo pip install codecov

  # Download and install cmake
  - |
    if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
      sudo mkdir -p ${DEPS_DIR}/cmake
      sudo wget --no-check-certificate --quiet -O - ${CMAKE_URL} | sudo tar --strip-components=1 -xz -C ${DEPS_DIR}/cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi

notifications:
  email: shevchenkcoigor@gmail.com

script:
  ############################################################################
  # Build main and tests
  ############################################################################
  - /opt/qt56/bin/qt56-env.sh
  - echo ${PATH}
  - echo ${CXX}
  - ${CXX} --version
  - ${CXX} -v
  - lcov -v
  - mkdir -p build
  - cd build
  - cmake -DCMAKE_CXX_FLAGS=${CXX_FLAGS} -DCODE_COVERAGE=ON -DBUILD_TESTING=ON ..
  - cmake --build . --target all 
  - ctest --output-on-failure

after_success:
  # Create lcov report
  # capture coverage info
  - lcov --directory . --capture --output-file coverage.info
  # filter out system and extra files.
  # To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
  - lcov --remove coverage.info '*/usr/*' "${HOME}" '/.cache/*' '*/3rdparty/*' '*/tests/*' '*/lib/*' "*_autogen/*" --output-file coverage.info
  # output coverage data for debugging (optional)
  - lcov --list coverage.info
  # Uploading to CodeCov
  # '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
  - codecov -X gcov
